//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=4.0.30319.18020.
// 
namespace PPOL.Legacy.PPOLService2
{

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "PsnNoteAPIServiceSoapBinding", Namespace = "http://api.sales.cxrm.com/")]
    public partial class PsnNoteAPIService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback attachEmailAsNoteOperationCompleted;

        private System.Threading.SendOrPostCallback attachToCustomerOperationCompleted;

        private System.Threading.SendOrPostCallback attachNoteToContactOperationCompleted;

        private System.Threading.SendOrPostCallback attachToCustomerWithAttachmentOperationCompleted;

        private System.Threading.SendOrPostCallback attachToContactOperationCompleted;

        private System.Threading.SendOrPostCallback attachToContactWithAttachmentOperationCompleted;

        private System.Threading.SendOrPostCallback attachEmailAsNoteWithAttachmentOperationCompleted;

        private System.Threading.SendOrPostCallback attachNoteToContactWithAttachmentOperationCompleted;

        private System.Threading.SendOrPostCallback findContactByEmailOperationCompleted;

        /// <remarks/>
        public PsnNoteAPIService()
        {
            this.Url = "http://www.planplusonline08.com/cxf/PsnNoteAPI";
        }

        /// <remarks/>
        public event attachEmailAsNoteCompletedEventHandler attachEmailAsNoteCompleted;

        /// <remarks/>
        public event attachToCustomerCompletedEventHandler attachToCustomerCompleted;

        /// <remarks/>
        public event attachNoteToContactCompletedEventHandler attachNoteToContactCompleted;

        /// <remarks/>
        public event attachToCustomerWithAttachmentCompletedEventHandler attachToCustomerWithAttachmentCompleted;

        /// <remarks/>
        public event attachToContactCompletedEventHandler attachToContactCompleted;

        /// <remarks/>
        public event attachToContactWithAttachmentCompletedEventHandler attachToContactWithAttachmentCompleted;

        /// <remarks/>
        public event attachEmailAsNoteWithAttachmentCompletedEventHandler attachEmailAsNoteWithAttachmentCompleted;

        /// <remarks/>
        public event attachNoteToContactWithAttachmentCompletedEventHandler attachNoteToContactWithAttachmentCompleted;

        /// <remarks/>
        public event findContactByEmailCompletedEventHandler findContactByEmailCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://api.sales.cxrm.com/", ResponseNamespace = "http://api.sales.cxrm.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string attachEmailAsNote([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg2, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg3, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg4, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg5)
        {
            object[] results = this.Invoke("attachEmailAsNote", new object[] {
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    arg5});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginattachEmailAsNote(string arg0, string arg1, string arg2, string arg3, string arg4, string arg5, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("attachEmailAsNote", new object[] {
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    arg5}, callback, asyncState);
        }

        /// <remarks/>
        public string EndattachEmailAsNote(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void attachEmailAsNoteAsync(string arg0, string arg1, string arg2, string arg3, string arg4, string arg5)
        {
            this.attachEmailAsNoteAsync(arg0, arg1, arg2, arg3, arg4, arg5, null);
        }

        /// <remarks/>
        public void attachEmailAsNoteAsync(string arg0, string arg1, string arg2, string arg3, string arg4, string arg5, object userState)
        {
            if ((this.attachEmailAsNoteOperationCompleted == null))
            {
                this.attachEmailAsNoteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnattachEmailAsNoteOperationCompleted);
            }
            this.InvokeAsync("attachEmailAsNote", new object[] {
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    arg5}, this.attachEmailAsNoteOperationCompleted, userState);
        }

        private void OnattachEmailAsNoteOperationCompleted(object arg)
        {
            if ((this.attachEmailAsNoteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.attachEmailAsNoteCompleted(this, new attachEmailAsNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://api.sales.cxrm.com/", ResponseNamespace = "http://api.sales.cxrm.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string attachToCustomer([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg2, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg3, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg4, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg5, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg6, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg7)
        {
            object[] results = this.Invoke("attachToCustomer", new object[] {
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    arg5,
                    arg6,
                    arg7});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginattachToCustomer(string arg0, string arg1, string arg2, string arg3, string arg4, string arg5, string arg6, string arg7, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("attachToCustomer", new object[] {
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    arg5,
                    arg6,
                    arg7}, callback, asyncState);
        }

        /// <remarks/>
        public string EndattachToCustomer(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void attachToCustomerAsync(string arg0, string arg1, string arg2, string arg3, string arg4, string arg5, string arg6, string arg7)
        {
            this.attachToCustomerAsync(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, null);
        }

        /// <remarks/>
        public void attachToCustomerAsync(string arg0, string arg1, string arg2, string arg3, string arg4, string arg5, string arg6, string arg7, object userState)
        {
            if ((this.attachToCustomerOperationCompleted == null))
            {
                this.attachToCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnattachToCustomerOperationCompleted);
            }
            this.InvokeAsync("attachToCustomer", new object[] {
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    arg5,
                    arg6,
                    arg7}, this.attachToCustomerOperationCompleted, userState);
        }

        private void OnattachToCustomerOperationCompleted(object arg)
        {
            if ((this.attachToCustomerCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.attachToCustomerCompleted(this, new attachToCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://api.sales.cxrm.com/", ResponseNamespace = "http://api.sales.cxrm.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string attachNoteToContact([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg2, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg3, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg4, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg5, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg6, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg7)
        {
            object[] results = this.Invoke("attachNoteToContact", new object[] {
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    arg5,
                    arg6,
                    arg7});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginattachNoteToContact(string arg0, string arg1, string arg2, string arg3, string arg4, string arg5, string arg6, string arg7, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("attachNoteToContact", new object[] {
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    arg5,
                    arg6,
                    arg7}, callback, asyncState);
        }

        /// <remarks/>
        public string EndattachNoteToContact(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void attachNoteToContactAsync(string arg0, string arg1, string arg2, string arg3, string arg4, string arg5, string arg6, string arg7)
        {
            this.attachNoteToContactAsync(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, null);
        }

        /// <remarks/>
        public void attachNoteToContactAsync(string arg0, string arg1, string arg2, string arg3, string arg4, string arg5, string arg6, string arg7, object userState)
        {
            if ((this.attachNoteToContactOperationCompleted == null))
            {
                this.attachNoteToContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnattachNoteToContactOperationCompleted);
            }
            this.InvokeAsync("attachNoteToContact", new object[] {
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    arg5,
                    arg6,
                    arg7}, this.attachNoteToContactOperationCompleted, userState);
        }

        private void OnattachNoteToContactOperationCompleted(object arg)
        {
            if ((this.attachNoteToContactCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.attachNoteToContactCompleted(this, new attachNoteToContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://api.sales.cxrm.com/", ResponseNamespace = "http://api.sales.cxrm.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string attachToCustomerWithAttachment([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg2, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg3, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg4, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg5, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg6, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg7, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg8, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg9)
        {
            object[] results = this.Invoke("attachToCustomerWithAttachment", new object[] {
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    arg5,
                    arg6,
                    arg7,
                    arg8,
                    arg9});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginattachToCustomerWithAttachment(string arg0, string arg1, string arg2, string arg3, string arg4, string arg5, string arg6, string arg7, string arg8, string arg9, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("attachToCustomerWithAttachment", new object[] {
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    arg5,
                    arg6,
                    arg7,
                    arg8,
                    arg9}, callback, asyncState);
        }

        /// <remarks/>
        public string EndattachToCustomerWithAttachment(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void attachToCustomerWithAttachmentAsync(string arg0, string arg1, string arg2, string arg3, string arg4, string arg5, string arg6, string arg7, string arg8, string arg9)
        {
            this.attachToCustomerWithAttachmentAsync(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, null);
        }

        /// <remarks/>
        public void attachToCustomerWithAttachmentAsync(string arg0, string arg1, string arg2, string arg3, string arg4, string arg5, string arg6, string arg7, string arg8, string arg9, object userState)
        {
            if ((this.attachToCustomerWithAttachmentOperationCompleted == null))
            {
                this.attachToCustomerWithAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnattachToCustomerWithAttachmentOperationCompleted);
            }
            this.InvokeAsync("attachToCustomerWithAttachment", new object[] {
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    arg5,
                    arg6,
                    arg7,
                    arg8,
                    arg9}, this.attachToCustomerWithAttachmentOperationCompleted, userState);
        }

        private void OnattachToCustomerWithAttachmentOperationCompleted(object arg)
        {
            if ((this.attachToCustomerWithAttachmentCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.attachToCustomerWithAttachmentCompleted(this, new attachToCustomerWithAttachmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://api.sales.cxrm.com/", ResponseNamespace = "http://api.sales.cxrm.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string attachToContact([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg2, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg3, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg4, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg5, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg6, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg7)
        {
            object[] results = this.Invoke("attachToContact", new object[] {
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    arg5,
                    arg6,
                    arg7});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginattachToContact(string arg0, string arg1, string arg2, string arg3, string arg4, string arg5, string arg6, string arg7, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("attachToContact", new object[] {
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    arg5,
                    arg6,
                    arg7}, callback, asyncState);
        }

        /// <remarks/>
        public string EndattachToContact(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void attachToContactAsync(string arg0, string arg1, string arg2, string arg3, string arg4, string arg5, string arg6, string arg7)
        {
            this.attachToContactAsync(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, null);
        }

        /// <remarks/>
        public void attachToContactAsync(string arg0, string arg1, string arg2, string arg3, string arg4, string arg5, string arg6, string arg7, object userState)
        {
            if ((this.attachToContactOperationCompleted == null))
            {
                this.attachToContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnattachToContactOperationCompleted);
            }
            this.InvokeAsync("attachToContact", new object[] {
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    arg5,
                    arg6,
                    arg7}, this.attachToContactOperationCompleted, userState);
        }

        private void OnattachToContactOperationCompleted(object arg)
        {
            if ((this.attachToContactCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.attachToContactCompleted(this, new attachToContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://api.sales.cxrm.com/", ResponseNamespace = "http://api.sales.cxrm.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string attachToContactWithAttachment([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg2, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg3, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg4, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg5, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg6, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg7, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg8, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg9)
        {
            object[] results = this.Invoke("attachToContactWithAttachment", new object[] {
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    arg5,
                    arg6,
                    arg7,
                    arg8,
                    arg9});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginattachToContactWithAttachment(string arg0, string arg1, string arg2, string arg3, string arg4, string arg5, string arg6, string arg7, string arg8, string arg9, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("attachToContactWithAttachment", new object[] {
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    arg5,
                    arg6,
                    arg7,
                    arg8,
                    arg9}, callback, asyncState);
        }

        /// <remarks/>
        public string EndattachToContactWithAttachment(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void attachToContactWithAttachmentAsync(string arg0, string arg1, string arg2, string arg3, string arg4, string arg5, string arg6, string arg7, string arg8, string arg9)
        {
            this.attachToContactWithAttachmentAsync(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, null);
        }

        /// <remarks/>
        public void attachToContactWithAttachmentAsync(string arg0, string arg1, string arg2, string arg3, string arg4, string arg5, string arg6, string arg7, string arg8, string arg9, object userState)
        {
            if ((this.attachToContactWithAttachmentOperationCompleted == null))
            {
                this.attachToContactWithAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnattachToContactWithAttachmentOperationCompleted);
            }
            this.InvokeAsync("attachToContactWithAttachment", new object[] {
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    arg5,
                    arg6,
                    arg7,
                    arg8,
                    arg9}, this.attachToContactWithAttachmentOperationCompleted, userState);
        }

        private void OnattachToContactWithAttachmentOperationCompleted(object arg)
        {
            if ((this.attachToContactWithAttachmentCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.attachToContactWithAttachmentCompleted(this, new attachToContactWithAttachmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://api.sales.cxrm.com/", ResponseNamespace = "http://api.sales.cxrm.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string attachEmailAsNoteWithAttachment([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg2, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg3, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg4, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg5, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg6, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg7)
        {
            object[] results = this.Invoke("attachEmailAsNoteWithAttachment", new object[] {
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    arg5,
                    arg6,
                    arg7});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginattachEmailAsNoteWithAttachment(string arg0, string arg1, string arg2, string arg3, string arg4, string arg5, string arg6, string arg7, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("attachEmailAsNoteWithAttachment", new object[] {
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    arg5,
                    arg6,
                    arg7}, callback, asyncState);
        }

        /// <remarks/>
        public string EndattachEmailAsNoteWithAttachment(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void attachEmailAsNoteWithAttachmentAsync(string arg0, string arg1, string arg2, string arg3, string arg4, string arg5, string arg6, string arg7)
        {
            this.attachEmailAsNoteWithAttachmentAsync(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, null);
        }

        /// <remarks/>
        public void attachEmailAsNoteWithAttachmentAsync(string arg0, string arg1, string arg2, string arg3, string arg4, string arg5, string arg6, string arg7, object userState)
        {
            if ((this.attachEmailAsNoteWithAttachmentOperationCompleted == null))
            {
                this.attachEmailAsNoteWithAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnattachEmailAsNoteWithAttachmentOperationCompleted);
            }
            this.InvokeAsync("attachEmailAsNoteWithAttachment", new object[] {
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    arg5,
                    arg6,
                    arg7}, this.attachEmailAsNoteWithAttachmentOperationCompleted, userState);
        }

        private void OnattachEmailAsNoteWithAttachmentOperationCompleted(object arg)
        {
            if ((this.attachEmailAsNoteWithAttachmentCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.attachEmailAsNoteWithAttachmentCompleted(this, new attachEmailAsNoteWithAttachmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://api.sales.cxrm.com/", ResponseNamespace = "http://api.sales.cxrm.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string attachNoteToContactWithAttachment([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg2, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg3, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg4, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg5, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg6, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg7, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg8, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg9)
        {
            object[] results = this.Invoke("attachNoteToContactWithAttachment", new object[] {
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    arg5,
                    arg6,
                    arg7,
                    arg8,
                    arg9});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginattachNoteToContactWithAttachment(string arg0, string arg1, string arg2, string arg3, string arg4, string arg5, string arg6, string arg7, string arg8, string arg9, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("attachNoteToContactWithAttachment", new object[] {
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    arg5,
                    arg6,
                    arg7,
                    arg8,
                    arg9}, callback, asyncState);
        }

        /// <remarks/>
        public string EndattachNoteToContactWithAttachment(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void attachNoteToContactWithAttachmentAsync(string arg0, string arg1, string arg2, string arg3, string arg4, string arg5, string arg6, string arg7, string arg8, string arg9)
        {
            this.attachNoteToContactWithAttachmentAsync(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, null);
        }

        /// <remarks/>
        public void attachNoteToContactWithAttachmentAsync(string arg0, string arg1, string arg2, string arg3, string arg4, string arg5, string arg6, string arg7, string arg8, string arg9, object userState)
        {
            if ((this.attachNoteToContactWithAttachmentOperationCompleted == null))
            {
                this.attachNoteToContactWithAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnattachNoteToContactWithAttachmentOperationCompleted);
            }
            this.InvokeAsync("attachNoteToContactWithAttachment", new object[] {
                    arg0,
                    arg1,
                    arg2,
                    arg3,
                    arg4,
                    arg5,
                    arg6,
                    arg7,
                    arg8,
                    arg9}, this.attachNoteToContactWithAttachmentOperationCompleted, userState);
        }

        private void OnattachNoteToContactWithAttachmentOperationCompleted(object arg)
        {
            if ((this.attachNoteToContactWithAttachmentCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.attachNoteToContactWithAttachmentCompleted(this, new attachNoteToContactWithAttachmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://api.sales.cxrm.com/", ResponseNamespace = "http://api.sales.cxrm.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ppolContact findContactByEmail([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg2, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg3)
        {
            object[] results = this.Invoke("findContactByEmail", new object[] {
                    arg0,
                    arg1,
                    arg2,
                    arg3});
            return ((ppolContact)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginfindContactByEmail(string arg0, string arg1, string arg2, string arg3, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("findContactByEmail", new object[] {
                    arg0,
                    arg1,
                    arg2,
                    arg3}, callback, asyncState);
        }

        /// <remarks/>
        public ppolContact EndfindContactByEmail(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ppolContact)(results[0]));
        }

        /// <remarks/>
        public void findContactByEmailAsync(string arg0, string arg1, string arg2, string arg3)
        {
            this.findContactByEmailAsync(arg0, arg1, arg2, arg3, null);
        }

        /// <remarks/>
        public void findContactByEmailAsync(string arg0, string arg1, string arg2, string arg3, object userState)
        {
            if ((this.findContactByEmailOperationCompleted == null))
            {
                this.findContactByEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfindContactByEmailOperationCompleted);
            }
            this.InvokeAsync("findContactByEmail", new object[] {
                    arg0,
                    arg1,
                    arg2,
                    arg3}, this.findContactByEmailOperationCompleted, userState);
        }

        private void OnfindContactByEmailOperationCompleted(object arg)
        {
            if ((this.findContactByEmailCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.findContactByEmailCompleted(this, new findContactByEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://api.sales.cxrm.com/")]
    public partial class ppolContact
    {

        private string displayNameField;

        private string errorMessageField;

        private string firstNameField;

        private int idField;

        private string lastNameField;

        private string nameField;

        private string primaryEmailField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string displayName
        {
            get
            {
                return this.displayNameField;
            }
            set
            {
                this.displayNameField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string errorMessage
        {
            get
            {
                return this.errorMessageField;
            }
            set
            {
                this.errorMessageField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string firstName
        {
            get
            {
                return this.firstNameField;
            }
            set
            {
                this.firstNameField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string lastName
        {
            get
            {
                return this.lastNameField;
            }
            set
            {
                this.lastNameField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string primaryEmail
        {
            get
            {
                return this.primaryEmailField;
            }
            set
            {
                this.primaryEmailField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void attachEmailAsNoteCompletedEventHandler(object sender, attachEmailAsNoteCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class attachEmailAsNoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal attachEmailAsNoteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void attachToCustomerCompletedEventHandler(object sender, attachToCustomerCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class attachToCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal attachToCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void attachNoteToContactCompletedEventHandler(object sender, attachNoteToContactCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class attachNoteToContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal attachNoteToContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void attachToCustomerWithAttachmentCompletedEventHandler(object sender, attachToCustomerWithAttachmentCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class attachToCustomerWithAttachmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal attachToCustomerWithAttachmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void attachToContactCompletedEventHandler(object sender, attachToContactCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class attachToContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal attachToContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void attachToContactWithAttachmentCompletedEventHandler(object sender, attachToContactWithAttachmentCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class attachToContactWithAttachmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal attachToContactWithAttachmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void attachEmailAsNoteWithAttachmentCompletedEventHandler(object sender, attachEmailAsNoteWithAttachmentCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class attachEmailAsNoteWithAttachmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal attachEmailAsNoteWithAttachmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void attachNoteToContactWithAttachmentCompletedEventHandler(object sender, attachNoteToContactWithAttachmentCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class attachNoteToContactWithAttachmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal attachNoteToContactWithAttachmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void findContactByEmailCompletedEventHandler(object sender, findContactByEmailCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class findContactByEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal findContactByEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ppolContact Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ppolContact)(this.results[0]));
            }
        }
    }
}